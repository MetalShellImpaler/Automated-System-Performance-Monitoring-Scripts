
#include <stdio.h>
#include <windows.h>
#include <psapi.h>
#include <time.h>

// Function to get the system performance information
void getSystemPerformanceInfo(SYSTEM_PERFORMANCE_INFORMATION *sysPerfInfo)
{
    HANDLE hProcess;
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, GetCurrentProcessId());
    if (hProcess == NULL)
    {
        printf("OpenProcess failed (%d)\n", GetLastError());
        return;
    }
    if (!GetSystemPerformanceInfo(sysPerfInfo, sizeof(SYSTEM_PERFORMANCE_INFORMATION)))
    {
        printf("GetSystemPerformanceInfo failed (%d)\n", GetLastError());
        return;
    }
    CloseHandle(hProcess);
}

// Function to get the system time information
void getSystemTimeInfo(SYSTEM_TIME_INFORMATION *sysTimeInfo)
{
    HANDLE hProcess;
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, GetCurrentProcessId());
    if (hProcess == NULL)
    {
        printf("OpenProcess failed (%d)\n", GetLastError());
        return;
    }
    if (!GetSystemTimeInfo(sysTimeInfo, sizeof(SYSTEM_TIME_INFORMATION)))
    {
        printf("GetSystemTimeInfo failed (%d)\n", GetLastError());
        return;
    }
    CloseHandle(hProcess);
}

// Function to get the system memory information
void getSystemMemoryInfo(SYSTEM_MEMORY_INFORMATION *sysMemInfo)
{
    HANDLE hProcess;
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, GetCurrentProcessId());
    if (hProcess == NULL)
    {
        printf("OpenProcess failed (%d)\n", GetLastError());
        return;
    }
    if (!GetSystemMemoryInfo(sysMemInfo, sizeof(SYSTEM_MEMORY_INFORMATION)))
    {
        printf("GetSystemMemoryInfo failed (%d)\n", GetLastError());
        return;
    }
    CloseHandle(hProcess);
}

// Function to get the system disk information
void getSystemDiskInfo(SYSTEM_DISK_INFORMATION *sysDiskInfo)
{
    HANDLE hProcess;
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, GetCurrentProcessId());
    if (hProcess == NULL)
    {
        printf("OpenProcess failed (%d)\n", GetLastError());
        return;
    }
    if (!GetSystemDiskInfo(sysDiskInfo, sizeof(SYSTEM_DISK_INFORMATION)))
    {
        printf("GetSystemDiskInfo failed (%d)\n", GetLastError());
        return;
    }
    CloseHandle(hProcess);
}

// Function to get the system network information
void getSystemNetworkInfo(SYSTEM_NETWORK_INFORMATION *sysNetInfo)
{
    HANDLE hProcess;
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, GetCurrentProcessId());
    if (hProcess == NULL)
    {
        printf("OpenProcess failed (%d)\n", GetLastError());
        return;
    }
    if (!GetSystemNetworkInfo(sysNetInfo, sizeof(SYSTEM_NETWORK_INFORMATION)))
    {
        printf("GetSystemNetworkInfo failed (%d)\n", GetLastError());
        return;
    }
    CloseHandle(hProcess);
}

// Main function
int main()
{
    SYSTEM_PERFORMANCE_INFORMATION sysPerfInfo;
    SYSTEM_TIME_INFORMATION sysTimeInfo;
    SYSTEM_MEMORY_INFORMATION sysMemInfo;
    SYSTEM_DISK_INFORMATION sysDiskInfo;
    SYSTEM_NETWORK_INFORMATION sysNetInfo;
    time_t currentTime;
    char timeString[26];
    FILE *fp;
    char fileName[MAX_PATH];
    char *desktopPath;
    char *filePath;
    int i;

    // Get the system performance information
    getSystemPerformanceInfo(&sysPerfInfo);

    // Get the system time information
    getSystemTimeInfo(&sysTimeInfo);

    // Get the system memory information
    getSystemMemoryInfo(&sysMemInfo);

    // Get the system disk information
    getSystemDiskInfo(&sysDiskInfo);

    // Get the system network information
    getSystemNetworkInfo(&sysNetInfo);

    // Get the current time
    time(&currentTime);
    ctime_s(timeString, sizeof(timeString), &currentTime);

    // Create the file name
    desktopPath = getenv("USERPROFILE");
    filePath = strcat(desktopPath, "\\Desktop\\SystemPerformanceReport.txt");

    // Open the file
    fp = fopen(filePath, "w");
    if (fp == NULL)
    {
        printf("Error opening file!\n");
        exit(1);
    }

    // Write the report
    fprintf(fp, "System Performance Report\n");
    fprintf(fp, "Generated on %s\n\n", timeString);
    fprintf(fp, "System Performance Information\n");
    fprintf(fp, "--------------------------------\n");
    fprintf(fp, "Processor Queue Length: %d\n", sysPerfInfo.ProcessorQueueLength);
    fprintf(fp, "System Up Time: %d\n", sysPerfInfo.SystemUpTime);
    fprintf(fp, "System Idle Time: %d\n\n", sysPerfInfo.SystemIdleTime);
    fprintf(fp, "System Time Information\n");
    fprintf(fp, "------------------------\n");
    fprintf(fp, "System Time: %d\n", sysTimeInfo.SystemTime);
    fprintf(fp, "Time Zone Bias: %d\n", sysTimeInfo.TimeZoneBias);
    fprintf(fp, "Daylight Bias: %d\n\n", sysTimeInfo.DaylightBias);
    fprintf(fp, "System Memory Information\n");
    fprintf(fp, "-------------------------\n");
    fprintf(fp, "Total Physical Memory: %d\n", sysMemInfo.TotalPhysicalMemory);
    fprintf(fp, "Available Physical Memory: %d\n", sysMemInfo.AvailablePhysicalMemory);
    fprintf(fp, "Total Page File: %d\n", sysMemInfo.TotalPageFile);
    fprintf(fp, "Available Page File: %d\n", sysMemInfo.AvailablePageFile);
    fprintf(fp, "Total Virtual Memory: %d\n", sysMemInfo.TotalVirtualMemory);
    fprintf(fp, "Available Virtual Memory: %d\n\n", sysMemInfo.AvailableVirtualMemory);
    fprintf(fp, "System Disk Information\n");
    fprintf(fp, "-----------------------\n");
    for (i = 0; i < sysDiskInfo.NumberOfDisks; i++)
    {
        fprintf(fp, "Disk %d\n", i);
        fprintf(fp, "  Total Size: %d\n", sysDiskInfo.Disks[i].TotalSize);
        fprintf(fp, "  Free Size: %d\n", sysDiskInfo.Disks[i].FreeSize);
        fprintf(fp, "  File System: %s\n", sysDiskInfo.Disks[i].FileSystem);
    }
    fprintf(fp, "\nSystem Network Information\n");
    fprintf(fp, "-------------------------\n");
    fprintf(fp, "Bytes Received: %d\n", sysNetInfo.BytesReceived);
    fprintf(fp, "Bytes Sent: %d\n", sysNetInfo.BytesSent);
    fprintf(fp, "Packets Received: %d\n", sysNetInfo.PacketsReceived);
    fprintf(fp, "Packets Sent: %d\n", sysNetInfo.PacketsSent);

    // Close the file
    fclose(fp);

    return 0;
}